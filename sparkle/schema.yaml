%YAML 1.2
---
#
# API and Model Schema
# =====================
#
# Primary keys are described using the `pkey` property.  They can be either
# a single value such as `uuid` or composite value such as `[host, disk]`.
#
# Mount points for individual tables are split into individual components
# that need to correspond to parent mount points of other tables or be
# located at the root.
#
# For example:
#
#     instance:
#       pkey: uuid
#       mount:
#         /tenant/instance:
#           access: tenant/shared
#
# This example needs address `/tenant` to exist and be mapped to another
# table.  It is assumed that a property with the same name as the parent
# table will be used to look up children.  In this case, `instance` has
# a `tenant` property.
#
# Access control makes use of a few access modes attached to mount points.
# These are:
#
# *private*
# :    This table is not exposed to users in any way.
#      (But it can be indexed, which is useful.)
#
# *protected*
# :    Entity can only be accessed by alicorns.
#
# *shared*
# :    Entity can only be modified by alicorns but read and referenced by
#      anyone.  This is useful for things like public images.
#
# *tenant/owner*
# :    Entity can only be accessed with tenant token matching tenant
#      uuid in the path (assumed to be null if not specified) with
#      `owner` permission level.
#
# *tenant/user*
# :    Same as `tenant/owner` but the level can be `member` for
#      modifications and even `operator` for read-only access.
#
# *user/rw*
# :    Entity can only be accessed with user token matching user
#      email in the path (assumed to be null if not specified).
#
# *user/ro*
# :    Same as `user/rw`, but user cannot make any changes.
#
#
# There is a possibility for a `join` property, where can be
# enumerated keys (and according to our standards table names
# as well) which are used for a special collection endpoint `_join`.
# This endpoint is used to join data from related tables in collection
# listing (when you need to list entity details in a collection).
# Example of this is `cluster_instance`.

address:
  pkey: uuid
  mount:
    /tenant/instance/vnic/address:
      access: tenant/user

    /tenant/switch/network/address:
      access: tenant/user

    /switch/network/address:
      access: protected
      filter:
        tenant: null

bond:
  pkey: uuid
  mount:
    /host/bond:
      access: protected

cluster:
  pkey: uuid
  mount:
    /tenant/cluster:
      access: tenant/user

cluster_instance:
  pkey: uuid
  join: [cluster, instance]
  mount:
    /tenant/cluster/instance:
      access: tenant/user

    /tenant/instance/cluster:
      access: tenant/user

config:
  pkey: key
  mount:
    /config:
      access: protected

cpu_profile:
  pkey: uuid
  mount:
    /cpu-profile:
      access: shared

disk:
  pkey: id
  mount:
    /storage-pool/disk:
      access: protected

    /disk:
      access: protected

event:
  pkey: hash
  mount:
    /event:
      access: protected

    /host/event:
      access: protected

    /tenant/instance/event:
      access: tenant/user

extent:
  pkey: uuid
  index: [volume]
  mount: {}

host:
  pkey: uuid
  user-pkey: true
  index: [status, state]
  mount:
    /host:
      access: protected

image:
  pkey: uuid
  mount:
    /tenant/image:
      access: tenant/user

    /image:
      access: shared
      filter:
        tenant: null

instance:
  pkey: uuid
  mount:
    /tenant/instance:
      access: tenant/user

member:
  pkey: uuid
  mount:
    /tenant/member:
      access: tenant/owner

    /user/member:
      access: user/ro

network:
  pkey: uuid
  mount:
    /tenant/switch/network:
      access: tenant/user

    /switch/network:
      access: shared

nic:
  pkey: hwaddr
  mount:
    /host/nic:
      access: protected

    /host/bond/nic:
      access: protected

net_role:
  pkey: uuid
  mount:
    /host/bond/role:
      access: protected

quota:
  pkey: uuid
  mount:
    /tenant/quota:
      access: protected

route:
  pkey: uuid
  mount:
    /tenant/switch/network/route:
      access: tenant/user

    /switch/network/route:
      access: shared

storage_pool:
  pkey: uuid
  mount:
    /storage-pool:
      access: shared

switch:
  pkey: uuid
  mount:
    /tenant/switch:
      access: tenant/user

    /switch:
      access: shared
      filter:
        tenant: null

tenant:
  pkey: uuid
  mount:
    /tenant:
      access: tenant/user

user:
  pkey: email
  mount:
    /user:
      access: user/rw

vdisk:
  pkey: uuid
  mount:
    /tenant/instance/vdisk:
      access: tenant/user

    /tenant/volume/vdisk:
      access: tenant/user

vnic:
  pkey: uuid
  mount:
    /tenant/instance/vnic:
      access: tenant/user

    /tenant/switch/vnic:
      access: tenant/user

    /switch/vnic:
      access: protected

volume:
  pkey: uuid
  index: [base_image, state]
  mount:
    /storage-pool/volume:
      access: protected

    /tenant/volume:
      access: tenant/user

    /tenant/image/volume:
      access: tenant/user

    /image/volume:
      access: protected

host_disk:
  pkey: [host, disk]
  index: [storage_pool]
  virtual: true
  mount:
    /host/disk:
      access: protected

host_instance:
  pkey: [host, instance]
  virtual: true
  mount:
    /host/instance:
      access: protected

host_cpu_profile:
  pkey: [host, cpu_profile]
  virtual: true
  mount:
    /host/cpu-profile:
      access: protected

host_volume:
  pkey: [host, volume]
  virtual: true
  mount:
    /host/volume:
      access: protected

host_storage_pool:
  pkey: [host, storage_pool]
  virtual: true
  mount:
    /host/storage-pool:
      access: protected

host_image:
  pkey: [host, image]
  virtual: true
  mount:
    /host/image:
      access: protected

host_volume:
  pkey: [host, volume]
  virtual: true
  mount:
    /host/volume:
      access: protected

host_extent:
  pkey: [host, extent]
  virtual: true
  mount: {}


# vim:set sw=2 ts=2 et:
